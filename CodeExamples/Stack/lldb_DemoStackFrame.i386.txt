Demo: show stack frames in LLDB for example swap-V1
===================================================

Runs on CISC machines i386 Intel or corresponding AMD processors

# ----------------------------------------------------------
# Build
# ----------------------------------------------------------

cd ~/git_public_GdP1
git pull

cd ~/git_public_GdP1/CodeExamples/Stack
make clean; make

# ----------------------------------------------------------
# Start debugger in a terminal
# ----------------------------------------------------------
# Size 80x20

lldb bin/swap-V1 

# Notes:
#
# Note 1:
# The command script lldb_stackutils.py is imported via ~/.lldbinit
#
# Note 2:
# Due to setting 'target.skip-prologue true' we may simply set
# breakpoints at the first instruction after the function's prologue by
#    breakpoint set -n <function name>
# or even shorter
#
##   b <function name>

#----------------------------------
# Demo 1: C-Source
#----------------------------------

(lldb) list main

(lldb) b main

# Run the program

(lldb) run

# The program stops at the breakpoint

Process 2105 launched: '/home/lars/git_public_GdP1/CodeExamples/Stack/bin/swap-V1'
(i386)

Process 2105 stopped
* thread #1, name = 'swap-V1', stop reason = breakpoint 1.1
    frame #0: 0x004011db swap-V1` main  + 29 at swap-V1.c:21
   18  	int main() {
   19  	    int i1,i2;
   20
-> 21  	    i1=0x11223344;
   22  	    i2=0x55667788;
   23
   24  	    swap(i1,i2);
(lldb)

# * execute the program line by line in single steps relative to source code.
# * enter function swap
# * execute all statements of function swap
# * return from function swap
#
# Hint 1:
#
# next: single step one line of source code without stepping into functions
#       'next' (or 'n') is an abbreviation for 'thread step-over'
#
# step: single step one line of source code with stepping into functions
#       'step' (or 's') is an abbreviation for 'thread step-in'
#
# finish: finish executing the current stack frame and stop after returning.
#       'finish' (not 'f') is an abbreviation for 'thread step-out'
#
#      f: the single letter 'f' is an abreviation for command 'process status'
#         that prints the current line in the source code with 3 lines before
#         and after the current line as a context
#      
# Hint 2: you may start a GUI via command gui as well.
# However, this is overkill in our case.
#
# (lldb) gui

# Hint 3: show content of variables along the debugging tour
#
# show content of variable a in hex notation
# (lldb) p/x a
#
# show content of all variables belonging to the current frame
# (lldb) frame variable -f x

(lldb) step
(lldb) s
or simply
(lldb) <enter> will execute last command once more
...

Process 3149 stopped
* thread #1, name = 'swap-V1', stop reason = step in
    frame #0: 0x00005555555546ce swap-V1` main  + 37 at swap-V1.c:26
   23
   24  	    swap(i1,i2);
   25
-> 26  	    printf("After swap\n");
   27  	    printf("i1: %x\n",i1);
   28  	    printf("i2: %x\n",i2);
   29

# Continue until the end

(lldb) cont  or simply 'c'

# The programs produces output and terminates

(lldb) cont
After swap
i1: 11223344
i2: 55667788
Process 2105 exited with status = 0 (0x00000000) 
Process 2105 resuming

#--------------------------------------------------------------------
# Demo 2: Display assembler code with annotated C and/or machine code
#--------------------------------------------------------------------
# Terminal 85x32

# Hints about options
# Set disassembly flavor
# -F   att: AT&T flavor  (unix, default)
# -F intel: Intel flavor (windows)
#
# Show machine code
# -b
#
# Mixed mode assembler and C code
# -m 

# Show assembler code disassembled from machine of loaded target
#
# disassemble -n <function name>
# di -n <function name>

(lldb) disassemble -n main
(lldb) di -n main

swap-V1`main:
0x4011be <+0>:   leal   0x4(%esp), %ecx
0x4011c2 <+4>:   andl   $-0x10, %esp
0x4011c5 <+7>:   pushl  -0x4(%ecx)
0x4011c8 <+10>:  pushl  %ebp
0x4011c9 <+11>:  movl   %esp, %ebp
0x4011cb <+13>:  pushl  %ebx
0x4011cc <+14>:  pushl  %ecx
0x4011cd <+15>:  subl   $0x10, %esp
0x4011d0 <+18>:  calll  0x10a0                    ; __x86.get_pc_thunk.bx
0x4011d5 <+23>:  addl   $0x2e1f, %ebx             ; imm = 0x2E1F
0x4011db <+29>:  movl   $0x11223344, -0xc(%ebp)   ; imm = 0x11223344
0x4011e2 <+36>:  movl   $0x55667788, -0x10(%ebp)  ; imm = 0x55667788
0x4011e9 <+43>:  pushl  -0x10(%ebp)
0x4011ec <+46>:  pushl  -0xc(%ebp)
0x4011ef <+49>:  calll  0x1199                    ; swap at swap-V1.c:12:25
0x4011f4 <+54>:  addl   $0x8, %esp
0x4011f7 <+57>:  subl   $0xc, %esp
0x4011fa <+60>:  leal   -0x1fec(%ebx), %eax
0x401200 <+66>:  pushl  %eax
0x401201 <+67>:  calll  0x1050                    ; symbol stub for: puts
0x401206 <+72>:  addl   $0x10, %esp
0x401209 <+75>:  subl   $0x8, %esp
0x40120c <+78>:  pushl  -0xc(%ebp)
0x40120f <+81>:  leal   -0x1fe1(%ebx), %eax
0x401215 <+87>:  pushl  %eax
0x401216 <+88>:  calll  0x1040                    ; symbol stub for: printf
0x40121b <+93>:  addl   $0x10, %esp
0x40121e <+96>:  subl   $0x8, %esp
0x401221 <+99>:  pushl  -0x10(%ebp)
0x401224 <+102>: leal   -0x1fd9(%ebx), %eax
0x40122a <+108>: pushl  %eax
0x40122b <+109>: calll  0x1040                    ; symbol stub for: printf
0x401230 <+114>: addl   $0x10, %esp
0x401233 <+117>: movl   $0x0, %eax
0x401238 <+122>: leal   -0x8(%ebp), %esp
0x40123b <+125>: popl   %ecx
0x40123c <+126>: popl   %ebx
0x40123d <+127>: popl   %ebp
0x40123e <+128>: leal   -0x4(%ecx), %esp
0x401241 <+131>: retl

# Show mixed mode: assembler and C

(lldb) di -n main -m

** 18  	int main() {

swap-V1`main:
0x4011be <+0>:   leal   0x4(%esp), %ecx
0x4011c2 <+4>:   andl   $-0x10, %esp
0x4011c5 <+7>:   pushl  -0x4(%ecx)
0x4011c8 <+10>:  pushl  %ebp
0x4011c9 <+11>:  movl   %esp, %ebp
0x4011cb <+13>:  pushl  %ebx
0x4011cc <+14>:  pushl  %ecx
0x4011cd <+15>:  subl   $0x10, %esp
0x4011d0 <+18>:  calll  0x10a0                    ; __x86.get_pc_thunk.bx
0x4011d5 <+23>:  addl   $0x2e1f, %ebx             ; imm = 0x2E1F

   19  	    int i1,i2;
   20
** 21  	    i1=0x11223344;

0x4011db <+29>:  movl   $0x11223344, -0xc(%ebp)   ; imm = 0x11223344

** 22  	    i2=0x55667788;
   23

0x4011e2 <+36>:  movl   $0x55667788, -0x10(%ebp)  ; imm = 0x55667788

** 24  	    swap(i1,i2);
   25

0x4011e9 <+43>:  pushl  -0x10(%ebp)
0x4011ec <+46>:  pushl  -0xc(%ebp)
0x4011ef <+49>:  calll  0x1199                    ; swap at swap-V1.c:12:25
0x4011f4 <+54>:  addl   $0x8, %esp

** 26  	    printf("After swap\n");

0x4011f7 <+57>:  subl   $0xc, %esp
0x4011fa <+60>:  leal   -0x1fec(%ebx), %eax
0x401200 <+66>:  pushl  %eax
0x401201 <+67>:  calll  0x1050                    ; symbol stub for: puts
0x401206 <+72>:  addl   $0x10, %esp

** 27  	    printf("i1: %x\n",i1);

0x401209 <+75>:  subl   $0x8, %esp
0x40120c <+78>:  pushl  -0xc(%ebp)
0x40120f <+81>:  leal   -0x1fe1(%ebx), %eax
0x401215 <+87>:  pushl  %eax
0x401216 <+88>:  calll  0x1040                    ; symbol stub for: printf
0x40121b <+93>:  addl   $0x10, %esp

** 28  	    printf("i2: %x\n",i2);
   29

0x40121e <+96>:  subl   $0x8, %esp
0x401221 <+99>:  pushl  -0x10(%ebp)
0x401224 <+102>: leal   -0x1fd9(%ebx), %eax
0x40122a <+108>: pushl  %eax
0x40122b <+109>: calll  0x1040                    ; symbol stub for: printf
0x401230 <+114>: addl   $0x10, %esp

** 30  	    return 0;

0x401233 <+117>: movl   $0x0, %eax

** 31  	}

0x401238 <+122>: leal   -0x8(%ebp), %esp
0x40123b <+125>: popl   %ecx
0x40123c <+126>: popl   %ebx
0x40123d <+127>: popl   %ebp
0x40123e <+128>: leal   -0x4(%ecx), %esp
0x401241 <+131>: retl

#----------
# Show a hex dump of the machine code of function main

x/136xb main

#>
0x004011be: 0x8d 0x4c 0x24 0x04 0x83 0xe4 0xf0 0xff
0x004011c6: 0x71 0xfc 0x55 0x89 0xe5 0x53 0x51 0x83
0x004011ce: 0xec 0x10 0xe8 0xcb 0xfe 0xff 0xff 0x81
0x004011d6: 0xc3 0x1f 0x2e 0x00 0x00 0xc7 0x45 0xf4
0x004011de: 0x44 0x33 0x22 0x11 0xc7 0x45 0xf0 0x88
0x004011e6: 0x77 0x66 0x55 0xff 0x75 0xf0 0xff 0x75
0x004011ee: 0xf4 0xe8 0xa5 0xff 0xff 0xff 0x83 0xc4
0x004011f6: 0x08 0x83 0xec 0x0c 0x8d 0x83 0x14 0xe0
0x004011fe: 0xff 0xff 0x50 0xe8 0x4a 0xfe 0xff 0xff
0x00401206: 0x83 0xc4 0x10 0x83 0xec 0x08 0xff 0x75
0x0040120e: 0xf4 0x8d 0x83 0x1f 0xe0 0xff 0xff 0x50
0x00401216: 0xe8 0x25 0xfe 0xff 0xff 0x83 0xc4 0x10
0x0040121e: 0x83 0xec 0x08 0xff 0x75 0xf0 0x8d 0x83
0x00401226: 0x27 0xe0 0xff 0xff 0x50 0xe8 0x10 0xfe
0x0040122e: 0xff 0xff 0x83 0xc4 0x10 0xb8 0x00 0x00
0x00401236: 0x00 0x00 0x8d 0x65 0xf8 0x59 0x5b 0x5d
0x0040123e: 0x8d 0x61 0xfc 0xc3 0x8b 0x04 0x24 0xc3

# Alternatively we use the disassembler utility by Derek Selander
#
# Note: the program must be running (raw input)

(lldb) run

Process 2316 stopped
* thread #1, name = 'swap-V1', stop reason = breakpoint 1.1
    frame #0: 0x004011db swap-V1` main  + 29 at swap-V1.c:21
   18  	int main() {
   19  	    int i1,i2;
   20
-> 21  	    i1=0x11223344;
   22  	    i2=0x55667788;
   23
   24  	    swap(i1,i2);


(lldb) dd main

swap-V1, main
    0    0x4011be <+0>:    leal  0x4(%esp),  %ecx  
    1    0x4011c2 <+4>:    andl  $-0x10,  %esp  
    2    0x4011c5 <+7>:    pushl -0x4(%ecx)  
    3    0x4011c8 <+10>:   pushl %ebp  
    4    0x4011c9 <+11>:   movl  %esp,  %ebp  
    5    0x4011cb <+13>:   pushl %ebx  
    6    0x4011cc <+14>:   pushl %ecx  
    7    0x4011cd <+15>:   subl  $0x10,  %esp  
   *8    0x4011d0 <+18>:   calll 0x4010a0  ; __x86.get_pc_thunk.bx
    9    0x4011d5 <+23>:   addl  $0x2e1f,  %ebx imm = 0x2E1F  
->  10   0x4011db <+29>:   movl  $0x11223344,  -0xc(%ebp) imm = 0x11223344  
    11   0x4011e2 <+36>:   movl  $0x55667788,  -0x10(%ebp) imm = 0x55667788  
    12   0x4011e9 <+43>:   pushl -0x10(%ebp)  
    13   0x4011ec <+46>:   pushl -0xc(%ebp)  
   *14   0x4011ef <+49>:   calll 0x401199  ; swap
    15   0x4011f4 <+54>:   addl  $0x8,  %esp  
    16   0x4011f7 <+57>:   subl  $0xc,  %esp  
    17   0x4011fa <+60>:   leal  -0x1fec(%ebx),  %eax  
    18   0x401200 <+66>:   pushl %eax  
   *19   0x401201 <+67>:   calll 0x401050  ; puts
    20   0x401206 <+72>:   addl  $0x10,  %esp  
    21   0x401209 <+75>:   subl  $0x8,  %esp  
    22   0x40120c <+78>:   pushl -0xc(%ebp)  
    23   0x40120f <+81>:   leal  -0x1fe1(%ebx),  %eax  
    24   0x401215 <+87>:   pushl %eax  
   *25   0x401216 <+88>:   calll 0x401040  ; printf
    26   0x40121b <+93>:   addl  $0x10,  %esp  
    27   0x40121e <+96>:   subl  $0x8,  %esp  
    28   0x401221 <+99>:   pushl -0x10(%ebp)  
    29   0x401224 <+102>:  leal  -0x1fd9(%ebx),  %eax  
    30   0x40122a <+108>:  pushl %eax  
   *31   0x40122b <+109>:  calll 0x401040  ; printf
    32   0x401230 <+114>:  addl  $0x10,  %esp  
    33   0x401233 <+117>:  movl  $0x0,  %eax  
    34   0x401238 <+122>:  leal  -0x8(%ebp),  %esp  
    35   0x40123b <+125>:  popl  %ecx  
    36   0x40123c <+126>:  popl  %ebx  
    37   0x40123d <+127>:  popl  %ebp  
    38   0x40123e <+128>:  leal  -0x4(%ecx),  %esp  
   *39   0x401241 <+131>:  retl   


#-------------------------------------------------------
# Demo 3: Stepwise execute the program with stack dumps
#-------------------------------------------------------

# Set breakpoints in functions main and swap
# where breakpoints should be located 'after' the prelude.
#
# See setting 'target.skip-prologue true'

(lldb) b main
(lldb) b swap

# Show list of breakpoints
#  breakpoint list
# Delete breakpoints
#  breakpoint delete 1
# Help: help breakpoint


(lldb) run

Process 3555 stopped
* thread #1, name = 'swap-V1', stop reason = breakpoint 3.1
    frame #0: 0x00005555555546b1 swap-V1` main  + 8 at swap-V1.c:21
   18  	int main() {
   19  	    int i1,i2;
   20
-> 21  	    i1=0x11223344;
   22  	    i2=0x55667788;
   23
   24  	    swap(i1,i2);

# Dump contents of the entire call stack
(lldb) stack_all 

bffff110: 50 f1 ff bf
bffff114: 78 36 fc b7
bffff118: 50 3b fc b7
bffff11c: 01 00 00 00
bffff120: 40 f1 ff bf
bffff124: f4 cf e1 b7
bffff128: 00 00 00 00  <-- fp of frame #0: main

# Show addresses of local variables i1 and i2
(lldb) p/x &i1
(int *) $0 = 0xbffff11c
(lldb) p/x &i2
(int *) $1 = 0xbffff118

# Execute assignments to i1 and i2 doing two consecutive 's' commands

(lldb) s
(lldb) s

# Dump the stack again
(lldb) stack_all

bffff110: 50 f1 ff bf
bffff114: 78 36 fc b7
bffff118: 88 77 66 55
bffff11c: 44 33 22 11
bffff120: 40 f1 ff bf
bffff124: f4 cf e1 b7
bffff128: 00 00 00 00  <-- fp of frame #0: main

# Print content of variables i1 and i2

# Either via

(lldb) fr v -f x i1 i2
(int) i1 = 0x11223344
(int) i2 = 0x55667788

# or via

(lldb) p/x i1 
int) $2 = 0x11223344
(lldb) p/x i2
(int) $3 = 0x55667788

# Raw dump of the frame from top of stack downwards for 32 byte (hex)

(lldb) x/32xb $esp
0xbffff110: 0x50 0xf1 0xff 0xbf 0x78 0x36 0xfc 0xb7
0xbffff118: 0x88 0x77 0x66 0x55 0x44 0x33 0x22 0x11
0xbffff120: 0x40 0xf1 0xff 0xbf 0xf4 0xcf 0xe1 0xb7
0xbffff128: 0x00 0x00 0x00 0x00 0xc5 0x32 0xc2 0xb7

# Show current halting position with context
# Either via
#     process status
# or shorter via 'f'

(lldb) f
frame #0: 0x004011e9 swap-V1` main  + 43 at swap-V1.c:24
   21  	    i1=0x11223344;
   22  	    i2=0x55667788;
   23  	
-> 24  	    swap(i1,i2);
   25  	
   26  	    printf("After swap\n");
   27  	    printf("i1: %x\n",i1);

#
# Step into function swap
# Either via cont 'c' or via a single step 's'

(lldb) s
Process 2391 stopped
* thread #1, name = 'swap-V1', stop reason = breakpoint 2.1
    frame #0: 0x004011a9 swap-V1` swap(a=287454020, b=1432778632)  + 16 at swap-V1.c:13
   10  	#include <stdio.h>
   11
   12  	void swap(int a, int b) {
-> 13  	    int tmp = a;
   14  	    a = b;
   15  	    b = tmp;
   16  	}

#
# Show contents of frame pointer and stack pointer (registers ebp and esp)
#

(lldb) register read ebp esp
     ebp = 0xbffff100
     esp = 0xbffff0f0

# Show contents of local variables and parameters of current frame
# - with additional information
# - using hex format

(lldb) frame variable -f x -L -c

swap-V1.c:12:15: 0xbffff108: (int) a = 0x11223344
swap-V1.c:12:22: 0xbffff10c: (int) b = 0x55667788
swap-V1.c:13:9: 0xbffff0fc: (int) tmp = 0xb7e1d048

# Dump the entire call stack using utility function 'stack_all'
# imported from lldb_stackutils.py

(lldb) stack_all

bffff0f0: 50 95 fc b7
bffff0f4: 00 00 00 00
bffff0f8: 2f ca c1 b7
bffff0fc: 48 d0 e1 b7
bffff100: 28 f1 ff bf  <-- fp of frame #0
bffff104: f4 11 40 00
bffff108: 44 33 22 11
bffff10c: 88 77 66 55
bffff110: 50 f1 ff bf
bffff114: 78 36 fc b7
bffff118: 88 77 66 55
bffff11c: 44 33 22 11
bffff120: 40 f1 ff bf
bffff124: f4 cf e1 b7
bffff128: 00 00 00 00  <-- fp of frame #1: main

# Q: Where are the local vars (here, only variable tmp) of swapV1?
# A: Above the position that is pointed to by register ebp == bffff100
#    Variable tmp is stored at address 0xbffff0fc

# Disassemble function of current frame
# With utility 'dd' by Derek Salander loaded
# 

(lldb) dd
swap-V1, swap
    0    0x401199 <+0>:    pushl %ebp  
    1    0x40119a <+1>:    movl  %esp,  %ebp  
    2    0x40119c <+3>:    subl  $0x10,  %esp  
   *3    0x40119f <+6>:    calll 0x401242  ; __x86.get_pc_thunk.ax
    4    0x4011a4 <+11>:   addl  $0x2e50,  %eax imm = 0x2E50  
->  5    0x4011a9 <+16>:   movl  0x8(%ebp),  %eax  
    6    0x4011ac <+19>:   movl  %eax,  -0x4(%ebp)  
    7    0x4011af <+22>:   movl  0xc(%ebp),  %eax  
    8    0x4011b2 <+25>:   movl  %eax,  0x8(%ebp)  
    9    0x4011b5 <+28>:   movl  -0x4(%ebp),  %eax  
    10   0x4011b8 <+31>:   movl  %eax,  0xc(%ebp)  
    11   0x4011bb <+34>:   nop     
    12   0x4011bc <+35>:   leave   
   *13   0x4011bd <+36>:   retl   

# or use the builtin command 'disassemble' or 'di' for short

(lldb) di

swap-V1`swap:
    0x401199 <+0>:  pushl  %ebp
    0x40119a <+1>:  movl   %esp, %ebp
    0x40119c <+3>:  subl   $0x10, %esp
    0x40119f <+6>:  calll  0x401242                  ; __x86.get_pc_thunk.ax
    0x4011a4 <+11>: addl   $0x2e50, %eax             ; imm = 0x2E50
->  0x4011a9 <+16>: movl   0x8(%ebp), %eax
    0x4011ac <+19>: movl   %eax, -0x4(%ebp)
    0x4011af <+22>: movl   0xc(%ebp), %eax
    0x4011b2 <+25>: movl   %eax, 0x8(%ebp)
    0x4011b5 <+28>: movl   -0x4(%ebp), %eax
    0x4011b8 <+31>: movl   %eax, 0xc(%ebp)
    0x4011bb <+34>: nop
    0x4011bc <+35>: leave
    0x4011bd <+36>: retl

#
# Note:
# 
# During the prolog of the function swap, the followinga actions are performed,
# which implement the CDECL ABI for Intel i386

#  * save the frame pointer via pushl

    0x401199 <+0>:  pushl  %ebp

#  * assign esp = ebp
    0x40119a <+1>:  movl   %esp, %ebp

#  * reservation of stack space for local variables of function swap

    0x40119c <+3>:  subl   $0x10, %esp

# The next two assembler commands are some trickery to obtain position-independent
# code on x86. For AMD processors, its not needed and 64bit processors do not need
# this kind of code as well.
#
# It loads the position of the code into the %eax register, which allows global objects
# (which have a fixed offset from the code) to be accessed as an offset from
# that register.
#
# See
# https://www.technovelty.org/
#         linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html
# for a good explanation.

    0x40119f <+6>:  calll  0x401242                  ; __x86.get_pc_thunk.ax
    0x4011a4 <+11>: addl   $0x2e50, %eax             ; imm = 0x2E50


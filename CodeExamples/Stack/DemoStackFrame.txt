Demo: zeige Stack-Frames in GDB am Beispiel swap-V1
===================================================

Ausführung in virtueller Maschine (32Bit System)

cd ~/git_public_GdP1/CodeExamples/Stack
make clean; make

# Teminal 79x30 (66x27 reicht auch)

gdbtui -q bin/swap-V1

#----------------------------------
# Demo 1: C-Source
#----------------------------------

(gdb) break main
(gdb) run

# Wir führen das Programm im Einzelschritt (step) auf C-Ebene aus, bis
# wir direkt vor dem Aufruf der Funktion swap sind.

(gdb) s
...

#-------------------------------------
# Demo 2: Mit C annotierter Assembler
#-------------------------------------

Wir betrachten das Programm im Assembler-Mode mit
annotierten C-Statements

Ctrl-x a (TUI-Mode verlassen)

Ctrl-l löscht die Anzeige (clear screen!)

#Hints:
#set disassembly-flavor intel
#set disassembly-flavor att
#set print max-symbolic-offset 1

# Show disassembled code

(gdb) disass /m main

Dump of assembler code for function main:
18	int main() {
   0x004011be <+0>:	lea    0x4(%esp),%ecx
   0x004011c2:	and    $0xfffffff0,%esp
   0x004011c5:	push   -0x4(%ecx)
   0x004011c8:	push   %ebp
   0x004011c9:	mov    %esp,%ebp
   0x004011cb:	push   %ebx
   0x004011cc:	push   %ecx
   0x004011cd:	sub    $0x10,%esp
   0x004011d0:	call   0x4010a0 <__x86.get_pc_thunk.bx>
   0x004011d5:	add    $0x2e1f,%ebx

19	    int i1,i2;
20	
21	    i1=0x11223344;
   0x004011db:	movl   $0x11223344,-0xc(%ebp)

22	    i2=0x55667788;
   0x004011e2:	movl   $0x55667788,-0x10(%ebp)

23	
24	    swap(i1,i2);
   0x004011e9:	push   -0x10(%ebp)
   0x004011ec:	push   -0xc(%ebp)
   0x004011ef:	call   0x401199 <swap>
   0x004011f4:	add    $0x8,%esp
   ...

Optional: noch einmal, aber mit Maschinencode 'r'

(gdb) disass /rm main

Dump of assembler code for function main:
18	int main() {
   0x004011be <+0>:	8d 4c 24 04        	lea    0x4(%esp),%ecx
   0x004011c2:	83 e4 f0           	and    $0xfffffff0,%esp
   0x004011c5:	ff 71 fc           	push   -0x4(%ecx)
   0x004011c8:	55                 	push   %ebp
   0x004011c9:	89 e5              	mov    %esp,%ebp
   0x004011cb:	53                 	push   %ebx
   0x004011cc:	51                 	push   %ecx
   0x004011cd:	83 ec 10           	sub    $0x10,%esp
   0x004011d0:	e8 cb fe ff ff     	call   0x4010a0 <__x86.get_pc_thunk.bx>
   0x004011d5:	81 c3 1f 2e 00 00  	add    $0x2e1f,%ebx

19	    int i1,i2;
20
21	    i1=0x11223344;
   0x004011db:	c7 45 f4 44 33 22 11	movl   $0x11223344,-0xc(%ebp)

22	    i2=0x55667788;
   0x004011e2:	c7 45 f0 88 77 66 55	movl   $0x55667788,-0x10(%ebp)
...

#
#-- Erkläre Begriff Endianismus: Big Endian, Little Endian
#   am Beispiel  i1=0x11223344;
#             ->
#                c7 45 f0 44 33 22 11

Zusätzlich: reiner Hex-Dump der main Funktion

(gdb) set print max-symbolic-offset 1

(gdb) x/32xb main

0x4011be <main>:	0x8d	0x4c	0x24	0x04	0x83	0xe4	0xf0	0xff
0x4011c6:	0x71	0xfc	0x55	0x89	0xe5	0x53	0x51	0x83
0x4011ce:	0xec	0x10	0xe8	0xcb	0xfe	0xff	0xff	0x81
0x4011d6:	0xc3	0x1f	0x2e	0x00	0x00	0xc7	0x45	0xf4

Ctrl-x a (TUI-Mode wieder betreten)

Frage: was bedeutet das 'l' bei movl
Antwort: im AT&T-Flavor  des x86 Assembler 'long'
         Im Intel-Flavor des x86 Assembler stattdessen DWORD

Hint:
set disassembly-flavor intel
disass /rm main

21	    i1=0x11223344;
=> 0x004011db:	c7 45 f4 44 33 22 11	mov    DWORD PTR [ebp-0xc],0x11223344

set disassembly-flavor att
disass /rm main

21	    i1=0x11223344;
=> 0x004011db:	c7 45 f4 44 33 22 11	movl   $0x11223344,-0xc(%ebp)

#--------------------------------------------
# Demo 3: Schrittweise ausführen, stack dump
#--------------------------------------------

(gdb) info break

Falls in aktueller Session noch nicht geschehen

(gdb) break main

(gdb) run
(gdb) set disassembly-flavor att
(gdb) layout asm

Hint: zurück mit 'layout src'

Ausgabe des GDB konfigurieren (siehe Manual)

(gdb) set print max-symbolic-offset 1
(gdb) winheight asm 10

GDB-Skript für Animation des Stacks laden

(gdb) source gdb.stackdump 

Bezugspunkt für die Ausgabe des Stacks setzen: bfp - base frame pointer
(gdb) set_bfp 

Ausgabe des Stacks vom aktuellen Stackpointer bis hinunter zum bfp

(gdb) stack_all32

Hint: Für das Kommando stack_all32 reicht der Präfix 'stack_'

-----------
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0xb7fc3b50
0xbffff0fc: 0x00000001
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 0
-----------

Zur Erklärung aktuellen Frame-Pointer und Stack-Pointer ausgeben

(gdb) p $fp
$1 = (void *) 0xbffff108

(gdb) p $sp
$2 = (void *) 0xbffff0f0

Noch sind die Werte von i1, i2 nicht hinterlegt.

Wir führen das Programm in einzelnen Instruktionen (stepi oder kurz si) aus,
bis die Variablen i2,i2 in main belegt wurden

(gdb) stepi  (oder kurz si)
(gdb)        (Eingabetaste -> letzte Kommando wiederholen)

│B+  0x4011db        movl   $0x11223344,-0xc(%ebp)                              │
│    0x4011e2        movl   $0x55667788,-0x10(%ebp)                             │
│  > 0x4011e9        push   -0x10(%ebp)                                         │
│    0x4011ec        push   -0xc(%ebp)                                          │
│    0x4011ef        call   0x401199 <swap>                                     │

# Erneuter Dump des stack frames
(gdb) stack_all32 

-----------
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 0
-----------

# Jetzt sind i1 und i2 belegt (0x11223344, 0x55667788)

Optional: Zeige rohen Stack-Dump (man sieht hier die Architektur 'little endian')

(gdb) x/16xb $sp
0xbffff0f0:     0x30    0xf1    0xff    0xbf    0x78    0x36    0xfc    0xb7
0xbffff0f8:     0x88    0x77    0x66    0x55    0x44    0x33    0x22    0x11

Check:
(gdb) p &i1
$3 = (int *) 0xbffff0fc
(gdb) p &i2
$4 = (int *) 0xbffff0f8

Die Variable main::i1 liegt an Adresse 0xbffff0fc
Die Variable main::i2 liegt an Adresse 0xbffff0f8

Wir führen das Programm instruktionsweise (stepi or si for short) aus, bis
wir direkt vor dem Aufruf der Funktion swap sind.

(gdb) stepi  (oder kurz si)
(gdb) (Eingabetaste -> Wiederhole Kommando) 

│B+  0x4011db        movl   $0x11223344,-0xc(%ebp)                              │
│    0x4011e2        movl   $0x55667788,-0x10(%ebp)                             │
│    0x4011e9        push   -0x10(%ebp)                                         │
│    0x4011ec        push   -0xc(%ebp)                                          │
│  > 0x4011ef        call   0x401199 <swap>                                     │
│    0x4011f4        add    $0x8,%esp                                           │

# Erneuter Dump des stack frames
(gdb) stack_all32 
-----------
0xbffff0e8: 0x11223344
0xbffff0ec: 0x55667788
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 0
-----------

Durch die pushl-Aufrufe wurden die Parameter von swap mit Werten versorgt

Die Kopien von i1,i2 liegen an
    a: 0xbffff0e8
    b: 0xbffff0ec

Die Parameter werden von rechts nach links auf den Stack gelegt.
Bei swap(i1,i2) also zuerst Kopie von i2 und dann Kopie von i1.
Die Kopie des ersten Parameters liegt also zuoberst (kleinste Adresse)
auf dem Stack.

# Jetzt die Funktion swap betreten mit einem stepi

(gdb) si

│  > 0x401199 <swap>         push   %ebp                                        │
│    0x40119a <swap+1>       mov    %esp,%ebp                                   │
│    0x40119c                sub    $0x10,%esp                                  │
│    0x40119f                call   0x401242 <__x86.get_pc_thunk.ax>            │
│    0x4011a4                add    $0x2e50,%eax                                │
│    0x4011a9                mov    0x8(%ebp),%eax                              │
│    0x4011ac                mov    %eax,-0x4(%ebp)                             │

# und dann weitere ni (next instruction) bis vor

│    0x4011a9                mov    0x8(%ebp),%eax                              │

Damit überspringen wir die Einrichtung des Stack-Frames

│    0x401199 <swap>         push   %ebp                                        │
│    0x40119a <swap+1>       mov    %esp,%ebp                                   │
│    0x40119c                sub    $0x10,%esp                                  │
│    0x40119f                call   0x401242 <__x86.get_pc_thunk.ax>            │
│    0x4011a4                add    $0x2e50,%eax                                │
│  > 0x4011a9                mov    0x8(%ebp),%eax                              │
│    0x4011ac                mov    %eax,-0x4(%ebp)                             │
│    0x4011af                mov    0xc(%ebp),%eax                              │
│    0x4011b2                mov    %eax,0x8(%ebp)                              │
│    0x4011b5                mov    -0x4(%ebp),%eax                             │
│    0x4011b8                mov    %eax,0xc(%ebp)                              │
│    0x4011bb                nop                                                │
│    0x4011bc                leave                                              │
│    0x4011bd                ret                                                │

Memory dump zu Beginn von Swap

(gdb) winheight asm 7
(gdb) stack_all32

-----------
0xbffff0d0: 0xb7fc9550
0xbffff0d4: 0x00000000
0xbffff0d8: 0xb7c1ca2f
0xbffff0dc: 0xb7e1d048
0xbffff0e0: 0xbffff108 <--- fp 0
0xbffff0e4: 0x004011f4
0xbffff0e8: 0x11223344
0xbffff0ec: 0x55667788
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 1
-----------

Der Frame-Pointer $fp (%ebp) und der Stack-Pointer $sp (%esp)
wurden an das Frame von swap angepasst.

(gdb) p $fp
$5 = (void *) 0xbffff0e0
(gdb) p $sp
$6 = (void *) 0xbffff0d0

Nun werden die Instruktionen für den Werttausch in swap ausgeführt

Ctrl-x a  (verlasse TUI-Mode)

(gdb) disass /m swap

Dump of assembler code for function swap:
12	void swap(int a, int b) {
   0x00401199 <+0>:	push   %ebp
   0x0040119a <+1>:	mov    %esp,%ebp
   0x0040119c:	sub    $0x10,%esp
   0x0040119f:	call   0x401242 <__x86.get_pc_thunk.ax>
   0x004011a4:	add    $0x2e50,%eax

13	    int tmp = a;
=> 0x004011a9:	mov    0x8(%ebp),%eax
   0x004011ac:	mov    %eax,-0x4(%ebp)

14	    a = b;
   0x004011af:	mov    0xc(%ebp),%eax
   0x004011b2:	mov    %eax,0x8(%ebp)

15	    b = tmp;
   0x004011b5:	mov    -0x4(%ebp),%eax
   0x004011b8:	mov    %eax,0xc(%ebp)

16	}
   0x004011bb:	nop
   0x004011bc:	leave
   0x004011bd:	ret

End of assembler dump.

Ctrl-x a (zurueck in den TUI-Mode)

#------

Nun 2 mal Single Instruction Steps fuer
13	    int tmp = a;
=> 0x004011a9:	mov    0x8(%ebp),%eax
   0x004011ac:	mov    %eax,-0x4(%ebp)

(gdb) si
(gdb) si

Der im Parameter a liegende Wert landet in der lokalen Variablen tmp

Check Adresse von lokaler Variable tmp:

(gdb) p &tmp
$7 = (int *) 0xbffff0dc
(gdb) p $fp - 4
$8 = (void *) 0xbffff0dc

Check Adresse von Parameter a:

(gdb) p &a
$9 = (int *) 0xbffff0e8
(gdb) p $fp + 8
$10 = (void *) 0xbffff0e8

# Stackdump nach Zuweisung tmp = a

(gdb) stack_all32

-----------
0xbffff0d0: 0xb7fc9550
0xbffff0d4: 0x00000000
0xbffff0d8: 0xb7c1ca2f
0xbffff0dc: 0x11223344 <--- tmp
0xbffff0e0: 0xbffff108 <--- fp 0
0xbffff0e4: 0x004011f4
0xbffff0e8: 0x11223344 <--- a
0xbffff0ec: 0x55667788 <--- b
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788 <--- i2
0xbffff0fc: 0x11223344 <--- i1
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 1
-----------

Nun 2 mal Single Instuction Steps für
14	    a = b;
   0x004011af:	mov    0xc(%ebp),%eax
   0x004011b2:	mov    %eax,0x8(%ebp)

(gdb) si
(gdb) si

Der Wert von b wird nach a gespeichert

# Stackdump nach Zuweisung a = b

(gdb) stack_all32

-----------
0xbffff0d0: 0xb7fc9550
0xbffff0d4: 0x00000000
0xbffff0d8: 0xb7c1ca2f
0xbffff0dc: 0x11223344 <--- tmp
0xbffff0e0: 0xbffff108 <--- fp 0
0xbffff0e4: 0x004011f4
0xbffff0e8: 0x55667788 <--- a
0xbffff0ec: 0x55667788 <--- b
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 1
-----------

#------ 
Nun noch 2 mal Single Instruction Steps für

15	    b = tmp;
   0x004011b5:	mov    -0x4(%ebp),%eax
   0x004011b8:	mov    %eax,0xc(%ebp)

(gdb) si
(gdb) si

Der Wert von tmp wird in b gespeichert

Dump nach Ausführung aller Tauschoperationen

(gdb) stack_all32

-----------
0xbffff0d0: 0xb7fc9550
0xbffff0d4: 0x00000000
0xbffff0d8: 0xb7c1ca2f
0xbffff0dc: 0x11223344 <--- tmp
0xbffff0e0: 0xbffff108 <--- fp 0
0xbffff0e4: 0x004011f4
0xbffff0e8: 0x55667788 <--- a
0xbffff0ec: 0x11223344 <--- b
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344 <--- i1
0xbffff100: 0xbffff120 <--- i2
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 1
-----------

#------- Exit code der Funktion swap

│  > 0x4011bb        nop                                                        │
│    0x4011bc        leave                                                      │
│    0x4011bd        ret                                                        │

Der Befehl 'nop' ist ein reiner Füller (no operation), der vermutlich bei einer
Code Optimierung per Option -O2 für den Compiler gcc gestrichen würde.

Der Befehl 'leave' gibt den für die lokalen Variablen von swap reservierten
Speicher zurück, indem er den Stack-Pointer nach unten zieht und restauriert
danach automatisch das Frame-Pointer Register ebp.

# Check esp und ebp vor Ausführung des Befehls 'leave'

│    0x4011bc        leave                                                      │

(gdb) p/x $esp
$11 = 0xbffff0d0

(gdb) p/x $ebp 
$12 = 0xbffff0e0

Ausführen des Befehls 'leave'

│    0x4011bc        leave                                                      │
│  > 0x4011bd        ret                                                        │

# Check esp und ebp nach Ausführung des Befehls 'leave'

(gdb) p/x $esp
$13 = 0xbffff0e4
(gdb) p/x $ebp
$14 = 0xbffff108

Als Ergebnis der Ausführung des Befehls 'leave' wurde der
Frame-Pointer restauriert und enthält nun schon wieder den
Wert für das Stack-Frame der Funktion main().

Desweiteren zeigt der Stack-Pointer nun exakt dort auf den Stack,
wo die Rücksprungadresse in den Code von main() hinterlegt ist.

Dem letzten Stack-Dump entnehmen wir, dass die Rücksprungadresse
0x004011f4 and der Stelle 0xbffff0e4 == 'Inhalt von Register esp'
hinterlegt ist

0xbffff0e4: 0x004011f4

Wir führen den Befehl 'ret' mittels si aus und verlassen damit die Funktion swap.

Der Befehl 'ret' kopiert die Adresse, die durch den Stack-Pointer esp adressiert
wird, in das Befehlszähler register eip (instruction pointer).

Dadurch wird der Rücksprung ausgeführt, und wir landen am Ort der Rücksprungadresse.

│    0x4011ef        call   0x401199 <swap>                                     │
│  > 0x4011f4        add    $0x8,%esp                                           │
│    0x4011f7        sub    $0xc,%esp                                           │

Im Frame der Funktion main hat sich nichts geändert, da swap
die Werte von i1 und i2 in Kopie erhalten hat und nur die
Kopien vertauscht hat.

-----------
0xbffff0e8: 0x55667788
0xbffff0ec: 0x11223344
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 0
-----------

Check:

(gdb) p &i1
$15 = (int *) 0xbffff0fc
(gdb) p &i2
$16 = (int *) 0xbffff0f8

Im letzten Stack-Dump sieht man, dass die Parameterkopien, die wir vor
Ansprung des Unterprgramms swap auf den Stack gelegt haben, immer noch auf
dem Stack liegen, und zwar an der Oberkante des Stacks (top of Stack).

0xbffff0e8: 0x55667788
0xbffff0ec: 0x11223344

Der nächste Assembler-Befehl 'add' nach dem call-Befehl

│    0x4011ef        call   0x401199 <swap>                                     │
│  > 0x4011f4        add    $0x8,%esp                                           │


räumt genau dieses Überbleibsel vom letzten Unterprogrammaufruf auf,
indem er den Stackpointer um weitere 8 Byte nach unten zieht.

Somit ist der Aufruf des Unterprogramms swap beendet und auch das
hierfür notwendige Stack-Management beendet.

(gdb) si
(gdb) stack_all32
-----------
0xbffff0f0: 0xbffff130
0xbffff0f4: 0xb7fc3678
0xbffff0f8: 0x55667788
0xbffff0fc: 0x11223344
0xbffff100: 0xbffff120
0xbffff104: 0xb7e1cff4
0xbffff108: 0x00000000 <--- fp 0
-----------

Vergleichen Sie diesen Stack-Dump mit dem ersten Dump, den wir
in der Demo 3 zu Anfang gemacht haben.
Der Inhalt des Stacks vor dem Aufruf der Funktion swap
und der Inhalt nach Beendigung des Aufrufs sind identisch.

Insbesondere sind, wie bereist erwähnt, die beiden lokalen
Variablen i1, i2 der Funktion main() nicht verändert worden.

Somit ist das Programm swap-V1, welches als Dienstfunktion die Inhalte
der beiden Variablen i1, i2 der Funktion main vertauschen sollte,
kläglich gescheitert.

Die korrekte Lösung dieser Aufgabe können Sie im Programm swap-V2
sehen, welches nicht die Werte der beiden Variablen i1, i2 and die
Funktion swap übergibt (pass by value), sondern deren Speicheradressen
(pass by reference).

#
# Demo Beenden und Degubber verlassen
#

Ctrl-d

